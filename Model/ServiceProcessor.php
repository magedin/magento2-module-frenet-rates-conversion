<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2021 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\FrenetRatesConversion\Model;

use Frenet\ObjectType\Entity\Shipping\Quote\Service;
use Frenet\Shipping\Service\RateRequestProvider;
use MagedIn\FrenetRatesConversion\Model\Validator\ServiceConversionValidator;
use Magento\Framework\Exception\LocalizedException;
use Magento\Store\Api\Data\StoreInterface;
use Magento\Store\Model\StoreManagerInterface;
use Psr\Log\LoggerInterface;

class ServiceProcessor
{
    /**
     * @var RateRequestProvider
     */
    private $rateRequestProvider;

    /**
     * @var ServiceConversionValidator
     */
    private $conversionValidator;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @var Config
     */
    private $config;

    /**
     * @var LoggerInterface
     */
    private $logger;

    public function __construct(
        RateRequestProvider $rateRequestProvider,
        ServiceConversionValidator $conversionValidator,
        StoreManagerInterface $storeManager,
        Config $config,
        LoggerInterface $logger
    ) {
        $this->rateRequestProvider = $rateRequestProvider;
        $this->conversionValidator = $conversionValidator;
        $this->storeManager = $storeManager;
        $this->config = $config;
        $this->logger = $logger;
    }

    /**
     * @param Service $service
     *
     * @return Service
     */
    public function process(Service $service): Service
    {
        if (!$this->conversionValidator->validate($service)) {
            return $service;
        }

        try {
            $baseCurrency = $this->config->getBaseCurrency();
            $defaultCurrency = $this->getStore()->getDefaultCurrency();

            $basePrice = $service->getShippingPrice();
            $convertedPrice = $baseCurrency->convert($basePrice, $defaultCurrency);
            $service->setData('shipping_price', $convertedPrice);
        } catch (\Exception $e) {
            $this->logger->error($e);
        }

        return $service;
    }

    /**
     * @return StoreInterface
     */
    private function getStore()
    {
        try {
            return $this->storeManager->getStore();
        } catch (\Exception $e) {
            return $this->storeManager->getDefaultStoreView();
        }
    }
}
